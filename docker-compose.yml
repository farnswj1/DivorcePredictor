version: "3.2"

services:
  redis:
    container_name: redis
    image: redis:5
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
  db:
    container_name: db
    image: postgres:12
    restart: always
    environment:
      POSTGRES_DB: divorcepredictor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  backend:
    container_name: backend
    image: backend
    restart: always
    command : bash -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn backend.wsgi -w 4 -b 0.0.0.0:8000"
    env_file:
      - ./backend/.env
    build:
      context: ./backend/
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
  celery_worker:
    container_name: celery_worker
    image: backend
    restart: always
    command: celery -A backend worker -l info
    env_file:
      - ./backend/.env
    depends_on:
      - backend
      - redis
  celery_beat:
    container_name: celery_beat
    image: backend
    restart: always
    command: celery -A backend beat -l info
    env_file:
      - ./backend/.env
    depends_on:
      - backend
      - celery_worker
      - redis
  frontend:
    container_name: frontend
    image: frontend
    restart: always
    command : npm start
    env_file:
      - ./frontend/.env
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    stdin_open: true
    depends_on:
      - backend
  nginx:
    container_name: nginx
    image: nginx
    restart: always
    build:
      context: ./nginx/
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - frontend

volumes:
  redis_data:
  postgres_data:
